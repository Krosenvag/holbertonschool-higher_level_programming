#!/usr/bin/python3

""" 7. Integer validator """

class BaseGeometry:
"""A class with an unimplemented area() method and integer validation."""
def area(self):
    """Raises an exception to notify that the method is not implemented."""
    raise Exception('area() is not implemented')

def integer_validator(self, name, value):
    """Validates that value is a positive integer.

    Args:
        name (str): The name associated with the value.
        value (any): The value to be validated.

    Raises:
        TypeError: If value is not an integer.
        ValueError: If value is less than or equal to 0.
    """
    if type(value) != int:
        raise TypeError('{} must be an integer'.format(name))
    if value <= 0:
        raise ValueError('{} must be greater than 0'.format(name))

Test cases

if name == "main":
bg = BaseGeometry()
bg.integer_validator("my_int", 12)
bg.integer_validator("width", 89)

try:
    bg.integer_validator("name", "John")
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("age", 0)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("distance", -4)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("float", 3.14)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("none", None)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("list", [1, 2, 3])
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("dict", {"a": 1})
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("bool", True)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))